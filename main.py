import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
import csv
import pandas as pd
import random
import os

TOKEN = os.getenv('TOKEN')
URL_PHOTO = os.getenv('URL_PHOTO')

bot = Bot(token=TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['hollyRandom'])
async def random_Santas(message: types.Message):
    while True:
        try:
            data_csv = pd.read_csv('sdklaus_data.csv', encoding='Windows-1251')
            donee_finish = []
            santa_finish = []
            id = data_csv['name_santas'].tolist()

            for i in range(len(id)):
                santa_id = id[i]
                santa_finish.append(id[i])
                donee_list = data_csv['name_santas'].tolist()
                for finish in donee_finish:
                    donee_list.remove(finish)
                if id[i] in donee_list:
                    donee_list.remove(id[i])
                print(i, santa_id, id, donee_list)
                r = random.randint(0, len(donee_list) - 1)
                print(r)
                donee_id = donee_list[r]
                donee_list.append(id[i])
                donee_finish.append(donee_id)
                print(santa_id, donee_id)
        except:
            continue
        break
    data_csv = pd.read_csv('sdklaus_data.csv', encoding='Windows-1251')
    data_csv['name_id'] = data_csv['name_id'].astype('str')
    id_list = data_csv['name_id'].tolist()
    name_donne_list = data_csv['name_santas'].tolist()
    preferences_list = data_csv['preferences_user'].tolist()
    for index in range(len(santa_finish)):
        index_santa = name_donne_list.index(santa_finish[index])
        chat_id_santa = id_list[index_santa]
        index_donee = name_donne_list.index(donee_finish[index])
        name_donee = name_donne_list[index_donee]
        preferences_donne = preferences_list[index_donee]
        await bot.send_message(chat_id=chat_id_santa,
                                text=f'ü¶ä–¢–≤–æ–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π: {name_donee}, \n\n üåü–ï–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è: {preferences_donne}')
        #await bot.send_message(chat_id=-823023035, text = f'–ù–∞—Ä–æ–¥, —É –Ω–∞—Å —Ç—É—Ç –ø–∞—Ä–∞: \n\n –°–∞–Ω—Ç–∞: {name_donne_list[index_santa]} \n\n –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: {name_donee}')



@dp.message_handler(commands=['start_game'])
async def start_msg(message: types.Message):
    field_names= ["full_name", "name_id", "url_user",'name_user','login_user','name_santas','preferences_user']
    with open('sdklaus_data.csv', mode="w", newline='', encoding='Windows-1251') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(field_names)

# –°–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º—É –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
class Form(StatesGroup):
    name = State() # –§–ò–û
    preferences = State() # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    santas_login = State() # –ò–î –∏ –ª–æ–≥–∏–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

@dp.message_handler(commands=['start'])
async def start_msg(message: types.Message):

    data_csv = pd.read_csv('sdklaus_data.csv', encoding='Windows-1251')
    data_csv['name_id']=data_csv['name_id'].astype('str')
    id_list = data_csv['name_id'].unique().tolist()
    print(id_list)
    id_txt=str(message.from_user.id)
    print(id_txt)

    if id_txt not in id_list:
        await Form.name.set()
        await bot.send_photo(chat_id=message.chat.id, photo=URL_PHOTO,
        caption='‚òÉÔ∏è–ü—Ä–∏–≤–µ—Ç –°–∞–Ω—Ç–∞üéÖüèª, –ø—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è –∫ –æ–≥–æ–Ω—å–∫—Éüî•, —è –∫–∞–∫ —Ä–∞–∑ –≥–æ—Ç–æ–≤–ª—é —Å–ø–∏—Å–æ–∫üìù —Ç–∞–π–Ω—ã–π—Ö –°–∞–Ω—Ç, –Ω–µ –ø–æ–¥—Å–∫–∞–∂–µ—à—å —Å–≤–æ–µ –§–ò–û?')
        # await message.reply('‚òÉÔ∏è–ü—Ä–∏–≤–µ—Ç –°–∞–Ω—Ç–∞üéÖüèª, –ø—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è –∫ –æ–≥–æ–Ω—å–∫—Éüî•, —è –∫–∞–∫ —Ä–∞–∑ –≥–æ—Ç–æ–≤–ª—é —Å–ø–∏—Å–æ–∫üìù —Ç–∞–π–Ω—ã–π—Ö –°–∞–Ω—Ç, –Ω–µ –ø
    else:

        await message.reply(text=f'–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞—â–∞–π—Å—è –∫ @KatanaMedoeda')



# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('üßπ–Ø –≤—Å–µ —Å—Ç√´—Ä, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ :)')

# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –∏–º–µ–Ω–µ–º
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        data['santas_login'] = message.from_user.username
    exit = '/cancel' # –ß—Ç–æ–±—ã /cancel –∫–∞–∫ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞
    await Form.next()
    await message.reply("ü§î–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, —Ç–∞–∫ –°–∞–Ω—Ç–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µüéÅ \n\n –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–∂–º–∏ " + exit)


@dp.message_handler(state=Form.preferences)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['preferences'] = message.text
        markup = types.ReplyKeyboardRemove()
        full_name = message.from_user.full_name # –ø–æ–ª–Ω–æ–µ –∏–º—è
        name_id = message.from_user.id # –∏–¥
        url_user = message.from_user.url # —Å—Å—ã–ª–∫–∞
        name_user = message.from_user.first_name # –∏–º—è
        login_user = data['santas_login'] # –ª–æ–≥–∏–Ω
        name_santas = data['name'] #
        preferences_user = data['preferences'] #
        # —Ö—É–π–Ω—è santaList(login_user) = name_santas + '—É–≤–ª–µ—á–µ–Ω–∏—è: ' + preferences_user
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å–æ —Å–ª–∞–≤–∞—Ä–µ–º –ø–æ CSV —Ñ–∞–π–ª
        santa_list = []
        santa_list.append(full_name)
        santa_list.append(name_id)
        santa_list.append(url_user)
        santa_list.append(name_user)
        santa_list.append(login_user)
        santa_list.append(name_santas)
        santa_list.append(preferences_user)
        # –í—ã–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–æ–Ω—è–µ–º –Ω–æ–≤—É—é
        # field_names = ["full_name", "name_id", "url_user", 'name_user', 'login_user', 'name_santas', 'preferences_user']
        with open('sdklaus_data.csv', 'a', encoding='Windows-1251') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(santa_list)
        #await bot.send_message(chat_id=-823023035, text=f'‚ö°Ô∏è–¢–∞–∫ –Ω–∞—Ä–æ–¥, —É –Ω–∞—Å –Ω–æ–≤—ã–π –°–ê–ù–¢–ê: \n\n üìù–ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name} \n üõ∞–∏–¥: {name_id} \n üéÖüèª–§–ò–û: {name_santas} \n ‚òÉÔ∏è–£–≤–ª–µ—á–µ–Ω–∏—è: {preferences_user} \n üõ†–°—Å—ã–ª–∫–∞: {url_user} \n üê¶–ò–º—è: {name_user} \n üì≤–õ–æ–≥–∏–Ω: @{login_user}')
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞: \n\n üò∫–§–ò–û:', md.bold(data['name'])),
                md.text('üåü–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:', md.bold(data['preferences'])), '\n \n –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —è –ø–µ—Ä–µ–¥–∞–ª –¥–∞–Ω–Ω—ã–µ –°–∞–Ω—Ç–µüôå',
                sep='\n',
            ),
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN,

        )


    await state.finish()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
